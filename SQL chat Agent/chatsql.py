import warnings
warnings.filterwarnings('ignore')


# importing all the libraries
# from dotenv import load_dotenv
import os 
import langchain_community
from langchain_community.agent_toolkits.sql.base import create_sql_agent
from langchain_community.llms import OpenAI
from langchain_community.chat_models import ChatOpenAI
from langchain_community.utilities import SQLDatabase
from langchain_community.agent_toolkits.sql.toolkit import SQLDatabaseToolkit
from langchain.agents import AgentExecutor



#load openai api 
# load_dotenv()
# os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY')

class ChatWithSql:
    """ for chat and query user question with the SQL database
    """
    def __init__ (self, db_user, db_password, db_host, db_name):
        """"The is the constructor of ChatWithSQL class
        """
        self.db_user = db_user
        self.db_password = db_password
        self.db_host = db_host
        self.db_name = db_name
    
    def message(self, query):
        """" message method will take query from the user and returns the response.
        args: 
            query(string): question of the user
        returns:
            reponse(string): output generated by LLM
        """
        #initializing LLM
        llm = ChatOpenAI(model='gpt-4o-mini-2024-07-18', api_key="YOUR_API_KEY")

        # connect with database
        db = SQLDatabase.from_uri(f"mysql+pymysql://{self.db_user}:{self.db_password}@{self.db_host}/{self.db_name}")

        #initialize toolkit
        toolkit = SQLDatabaseToolkit(db= db, llm = llm)

        #create agent executor
        agen_executor = create_sql_agent(
        llm= llm,
        toolkit=toolkit,
        handling_parsing_errors = True,
        verbose = True
        )

        response = agen_executor.run(query)
        return response

# obj = ChatWithSql('root', '6e6b697565', 'localhost', 'bigyan_database')
# print(obj.message('How many columns are there in the table?'))